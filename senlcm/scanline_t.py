"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

class scanline_t(object):
    __slots__ = ["utime", "range", "portGain", "stbdGain", "portOffset", "stbdOffset", "portContrast", "stbdContrast", "nSamples", "portData", "stbdData"]

    def __init__(self):
        self.utime = 0
        self.range = 0.0
        self.portGain = 0.0
        self.stbdGain = 0.0
        self.portOffset = 0.0
        self.stbdOffset = 0.0
        self.portContrast = 0.0
        self.stbdContrast = 0.0
        self.nSamples = 0
        self.portData = []
        self.stbdData = []

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(scanline_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qfffffffi", self.utime, self.range, self.portGain, self.stbdGain, self.portOffset, self.stbdOffset, self.portContrast, self.stbdContrast, self.nSamples))
        buf.write(self.portData[:self.nSamples])
        buf.write(self.stbdData[:self.nSamples])

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != scanline_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return scanline_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = scanline_t()
        self.utime, self.range, self.portGain, self.stbdGain, self.portOffset, self.stbdOffset, self.portContrast, self.stbdContrast, self.nSamples = struct.unpack(">qfffffffi", buf.read(40))
        self.portData = buf.read(self.nSamples)
        self.stbdData = buf.read(self.nSamples)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if scanline_t in parents: return 0
        tmphash = (0xb791a17b68c341fe) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if scanline_t._packed_fingerprint is None:
            scanline_t._packed_fingerprint = struct.pack(">Q", scanline_t._get_hash_recursive([]))
        return scanline_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

