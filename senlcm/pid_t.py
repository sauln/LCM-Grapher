"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

class pid_t(object):
    __slots__ = ["utime", "Goal", "Input", "Error", "DerivErrorRaw", "DerivErrorFilt", "P", "I", "D", "PID"]

    def __init__(self):
        self.utime = 0
        self.Goal = 0.0
        self.Input = 0.0
        self.Error = 0.0
        self.DerivErrorRaw = 0.0
        self.DerivErrorFilt = 0.0
        self.P = 0.0
        self.I = 0.0
        self.D = 0.0
        self.PID = 0.0

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(pid_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qfffffffff", self.utime, self.Goal, self.Input, self.Error, self.DerivErrorRaw, self.DerivErrorFilt, self.P, self.I, self.D, self.PID))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != pid_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return pid_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = pid_t()
        self.utime, self.Goal, self.Input, self.Error, self.DerivErrorRaw, self.DerivErrorFilt, self.P, self.I, self.D, self.PID = struct.unpack(">qfffffffff", buf.read(44))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if pid_t in parents: return 0
        tmphash = (0xd6da4fc660b13466) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if pid_t._packed_fingerprint is None:
            pid_t._packed_fingerprint = struct.pack(">Q", pid_t._get_hash_recursive([]))
        return pid_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

