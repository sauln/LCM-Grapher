"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

class dvl_t(object):
    __slots__ = ["utime", "pitch", "roll", "hdg", "year", "month", "day", "hour", "minute", "second", "hundredths", "salinity", "temp", "depth", "sound_vel", "bitcode", "x_vel", "y_vel", "z_vel", "err_vel", "status_bi", "trans_vel", "long_vel", "norm_vel", "status_bs", "east_vel", "north_vel", "up_vel", "status_be", "east_dist", "north_dist", "up_dist", "bottom_range", "time_bd"]

    def __init__(self):
        self.utime = 0
        self.pitch = 0.0
        self.roll = 0.0
        self.hdg = 0.0
        self.year = 0
        self.month = 0
        self.day = 0
        self.hour = 0
        self.minute = 0
        self.second = 0
        self.hundredths = 0
        self.salinity = 0.0
        self.temp = 0.0
        self.depth = 0.0
        self.sound_vel = 0.0
        self.bitcode = 0
        self.x_vel = 0
        self.y_vel = 0
        self.z_vel = 0
        self.err_vel = 0
        self.status_bi = False
        self.trans_vel = 0
        self.long_vel = 0
        self.norm_vel = 0
        self.status_bs = False
        self.east_vel = 0
        self.north_vel = 0
        self.up_vel = 0
        self.status_be = False
        self.east_dist = 0.0
        self.north_dist = 0.0
        self.up_dist = 0.0
        self.bottom_range = 0.0
        self.time_bd = 0.0

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(dvl_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qdddbbbbbbbddddhhhhhbhhhbhhhbddddd", self.utime, self.pitch, self.roll, self.hdg, self.year, self.month, self.day, self.hour, self.minute, self.second, self.hundredths, self.salinity, self.temp, self.depth, self.sound_vel, self.bitcode, self.x_vel, self.y_vel, self.z_vel, self.err_vel, self.status_bi, self.trans_vel, self.long_vel, self.norm_vel, self.status_bs, self.east_vel, self.north_vel, self.up_vel, self.status_be, self.east_dist, self.north_dist, self.up_dist, self.bottom_range, self.time_bd))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != dvl_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return dvl_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = dvl_t()
        self.utime, self.pitch, self.roll, self.hdg, self.year, self.month, self.day, self.hour, self.minute, self.second, self.hundredths, self.salinity, self.temp, self.depth, self.sound_vel, self.bitcode, self.x_vel, self.y_vel, self.z_vel, self.err_vel, self.status_bi, self.trans_vel, self.long_vel, self.norm_vel, self.status_bs, self.east_vel, self.north_vel, self.up_vel, self.status_be, self.east_dist, self.north_dist, self.up_dist, self.bottom_range, self.time_bd = struct.unpack(">qdddbbbbbbbddddhhhhhbhhhbhhhbddddd", buf.read(136))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if dvl_t in parents: return 0
        tmphash = (0x576f150e50052b5a) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if dvl_t._packed_fingerprint is None:
            dvl_t._packed_fingerprint = struct.pack(">Q", dvl_t._get_hash_recursive([]))
        return dvl_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

