"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

class behavior_t(object):
    __slots__ = ["utime", "startTime", "name", "velocity", "heading", "startPoint", "endPoint", "timeout", "thrustPort", "thrustStbd", "maxX", "minX", "maxY", "minY", "endStatus", "endString", "pump", "pumpOnTime", "initThrust", "initThrustTime", "vbSetpoint", "vbOnTime", "artic", "vert_velocity"]

    def __init__(self):
        self.utime = 0
        self.startTime = 0
        self.name = ""
        self.velocity = 0.0
        self.heading = 0.0
        self.startPoint = [ 0.0 for dim0 in range(3) ]
        self.endPoint = [ 0.0 for dim0 in range(3) ]
        self.timeout = 0.0
        self.thrustPort = 0.0
        self.thrustStbd = 0.0
        self.maxX = 0.0
        self.minX = 0.0
        self.maxY = 0.0
        self.minY = 0.0
        self.endStatus = 0
        self.endString = ""
        self.pump = 0.0
        self.pumpOnTime = 0.0
        self.initThrust = 0.0
        self.initThrustTime = 0.0
        self.vbSetpoint = 0.0
        self.vbOnTime = 0.0
        self.artic = 0.0
        self.vert_velocity = 0.0

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(behavior_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qq", self.utime, self.startTime))
        __name_encoded = self.name.encode('utf-8')
        buf.write(struct.pack('>I', len(__name_encoded)+1))
        buf.write(__name_encoded)
        buf.write("\0")
        buf.write(struct.pack(">dd", self.velocity, self.heading))
        buf.write(struct.pack('>3d', *self.startPoint[:3]))
        buf.write(struct.pack('>3d', *self.endPoint[:3]))
        buf.write(struct.pack(">fffddddi", self.timeout, self.thrustPort, self.thrustStbd, self.maxX, self.minX, self.maxY, self.minY, self.endStatus))
        __endString_encoded = self.endString.encode('utf-8')
        buf.write(struct.pack('>I', len(__endString_encoded)+1))
        buf.write(__endString_encoded)
        buf.write("\0")
        buf.write(struct.pack(">fffffffd", self.pump, self.pumpOnTime, self.initThrust, self.initThrustTime, self.vbSetpoint, self.vbOnTime, self.artic, self.vert_velocity))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != behavior_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return behavior_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = behavior_t()
        self.utime, self.startTime = struct.unpack(">qq", buf.read(16))
        __name_len = struct.unpack('>I', buf.read(4))[0]
        self.name = buf.read(__name_len)[:-1].decode('utf-8', 'replace')
        self.velocity, self.heading = struct.unpack(">dd", buf.read(16))
        self.startPoint = struct.unpack('>3d', buf.read(24))
        self.endPoint = struct.unpack('>3d', buf.read(24))
        self.timeout, self.thrustPort, self.thrustStbd, self.maxX, self.minX, self.maxY, self.minY, self.endStatus = struct.unpack(">fffddddi", buf.read(48))
        __endString_len = struct.unpack('>I', buf.read(4))[0]
        self.endString = buf.read(__endString_len)[:-1].decode('utf-8', 'replace')
        self.pump, self.pumpOnTime, self.initThrust, self.initThrustTime, self.vbSetpoint, self.vbOnTime, self.artic, self.vert_velocity = struct.unpack(">fffffffd", buf.read(36))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if behavior_t in parents: return 0
        tmphash = (0xaf8c001c69688828) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if behavior_t._packed_fingerprint is None:
            behavior_t._packed_fingerprint = struct.pack(">Q", behavior_t._get_hash_recursive([]))
        return behavior_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

