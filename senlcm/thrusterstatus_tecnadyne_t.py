"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

class thrusterstatus_tecnadyne_t(object):
    __slots__ = ["utime", "ID", "valid_tstatus", "tmsg_good", "tmsg_bad", "fault_state", "reset", "digital_inputs", "loop_interval", "valid_dstatus", "dmsg_good", "dmsg_bad", "direction", "pwm_drive", "tach", "speed_error", "valid_estatus", "emsg_good", "emsg_bad", "speed_loop_status", "prop_dir", "pwm_duty", "tach_reading", "speed_loop_interval", "tach_error", "motor_voltage", "motor_current", "valid_adata", "amsg_good", "amsg_bad", "voltage", "current", "analog_control_voltage", "temperature", "thermister1", "thermister2", "valid_cdata", "cmsg_good", "cmsg_bad", "speed_loop_enabled", "rpm_goal", "cloop_interval", "tach_setpoint", "pwm_goal", "enable_acknowledged", "cmd_acknowledged"]

    def __init__(self):
        self.utime = 0
        self.ID = 0
        self.valid_tstatus = False
        self.tmsg_good = 0
        self.tmsg_bad = 0
        self.fault_state = False
        self.reset = False
        self.digital_inputs = 0
        self.loop_interval = 0
        self.valid_dstatus = False
        self.dmsg_good = 0
        self.dmsg_bad = 0
        self.direction = False
        self.pwm_drive = 0
        self.tach = 0
        self.speed_error = 0
        self.valid_estatus = False
        self.emsg_good = 0
        self.emsg_bad = 0
        self.speed_loop_status = 0
        self.prop_dir = False
        self.pwm_duty = 0
        self.tach_reading = 0.0
        self.speed_loop_interval = 0
        self.tach_error = 0
        self.motor_voltage = 0.0
        self.motor_current = 0.0
        self.valid_adata = False
        self.amsg_good = 0
        self.amsg_bad = 0
        self.voltage = 0.0
        self.current = 0.0
        self.analog_control_voltage = 0.0
        self.temperature = 0.0
        self.thermister1 = 0
        self.thermister2 = 0
        self.valid_cdata = False
        self.cmsg_good = 0
        self.cmsg_bad = 0
        self.speed_loop_enabled = False
        self.rpm_goal = 0.0
        self.cloop_interval = 0
        self.tach_setpoint = 0
        self.pwm_goal = 0
        self.enable_acknowledged = 0
        self.cmd_acknowledged = 0

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(thrusterstatus_tecnadyne_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qbbhhbbbbbhhbbbbbhhbbbfbbffbhhffffhhbhhbfbbbbb", self.utime, self.ID, self.valid_tstatus, self.tmsg_good, self.tmsg_bad, self.fault_state, self.reset, self.digital_inputs, self.loop_interval, self.valid_dstatus, self.dmsg_good, self.dmsg_bad, self.direction, self.pwm_drive, self.tach, self.speed_error, self.valid_estatus, self.emsg_good, self.emsg_bad, self.speed_loop_status, self.prop_dir, self.pwm_duty, self.tach_reading, self.speed_loop_interval, self.tach_error, self.motor_voltage, self.motor_current, self.valid_adata, self.amsg_good, self.amsg_bad, self.voltage, self.current, self.analog_control_voltage, self.temperature, self.thermister1, self.thermister2, self.valid_cdata, self.cmsg_good, self.cmsg_bad, self.speed_loop_enabled, self.rpm_goal, self.cloop_interval, self.tach_setpoint, self.pwm_goal, self.enable_acknowledged, self.cmd_acknowledged))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != thrusterstatus_tecnadyne_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return thrusterstatus_tecnadyne_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = thrusterstatus_tecnadyne_t()
        self.utime, self.ID, self.valid_tstatus, self.tmsg_good, self.tmsg_bad, self.fault_state, self.reset, self.digital_inputs, self.loop_interval, self.valid_dstatus, self.dmsg_good, self.dmsg_bad, self.direction, self.pwm_drive, self.tach, self.speed_error, self.valid_estatus, self.emsg_good, self.emsg_bad, self.speed_loop_status, self.prop_dir, self.pwm_duty, self.tach_reading, self.speed_loop_interval, self.tach_error, self.motor_voltage, self.motor_current, self.valid_adata, self.amsg_good, self.amsg_bad, self.voltage, self.current, self.analog_control_voltage, self.temperature, self.thermister1, self.thermister2, self.valid_cdata, self.cmsg_good, self.cmsg_bad, self.speed_loop_enabled, self.rpm_goal, self.cloop_interval, self.tach_setpoint, self.pwm_goal, self.enable_acknowledged, self.cmd_acknowledged = struct.unpack(">qbbhhbbbbbhhbbbbbhhbbbfbbffbhhffffhhbhhbfbbbbb", buf.read(89))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if thrusterstatus_tecnadyne_t in parents: return 0
        tmphash = (0x9de2f0742490385b) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if thrusterstatus_tecnadyne_t._packed_fingerprint is None:
            thrusterstatus_tecnadyne_t._packed_fingerprint = struct.pack(">Q", thrusterstatus_tecnadyne_t._get_hash_recursive([]))
        return thrusterstatus_tecnadyne_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

