"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

class ubms_status_t(object):
    __slots__ = ["utime", "percent_charge", "mode", "charge_stage", "inter_module_balancing", "module_num", "inter_balance_num", "low_temp_warning", "low_temp_alarm", "low_temp_shutdown", "over_temp_warning", "over_temp_alarm", "over_temp_shutdown", "crit_discharge_warning", "crit_discharge_alarm", "crit_discharge_shutdown", "over_volt_warning", "over_volt_alarm", "over_volt_shutdown", "over_current_warning", "over_current_alarm", "over_current_shutdown", "pcba_over_temp_warning", "pcba_over_temp_alarm", "pcba_over_temp_shutdown", "temp_sensor_failure", "volt_sensor_failure", "current_sensor_failure", "too_many_modules", "module_lost", "soc_mismatch", "low_capacity", "vmu_timeout", "discharge_precharge_fail", "sanity_error"]

    def __init__(self):
        self.utime = 0
        self.percent_charge = 0
        self.mode = ""
        self.charge_stage = ""
        self.inter_module_balancing = False
        self.module_num = 0
        self.inter_balance_num = 0
        self.low_temp_warning = False
        self.low_temp_alarm = False
        self.low_temp_shutdown = False
        self.over_temp_warning = False
        self.over_temp_alarm = False
        self.over_temp_shutdown = False
        self.crit_discharge_warning = False
        self.crit_discharge_alarm = False
        self.crit_discharge_shutdown = False
        self.over_volt_warning = False
        self.over_volt_alarm = False
        self.over_volt_shutdown = False
        self.over_current_warning = False
        self.over_current_alarm = False
        self.over_current_shutdown = False
        self.pcba_over_temp_warning = False
        self.pcba_over_temp_alarm = False
        self.pcba_over_temp_shutdown = False
        self.temp_sensor_failure = False
        self.volt_sensor_failure = False
        self.current_sensor_failure = False
        self.too_many_modules = False
        self.module_lost = False
        self.soc_mismatch = False
        self.low_capacity = False
        self.vmu_timeout = False
        self.discharge_precharge_fail = False
        self.sanity_error = False

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(ubms_status_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qh", self.utime, self.percent_charge))
        __mode_encoded = self.mode.encode('utf-8')
        buf.write(struct.pack('>I', len(__mode_encoded)+1))
        buf.write(__mode_encoded)
        buf.write("\0")
        __charge_stage_encoded = self.charge_stage.encode('utf-8')
        buf.write(struct.pack('>I', len(__charge_stage_encoded)+1))
        buf.write(__charge_stage_encoded)
        buf.write("\0")
        buf.write(struct.pack(">bhhbbbbbbbbbbbbbbbbbbbbbbbbbbbb", self.inter_module_balancing, self.module_num, self.inter_balance_num, self.low_temp_warning, self.low_temp_alarm, self.low_temp_shutdown, self.over_temp_warning, self.over_temp_alarm, self.over_temp_shutdown, self.crit_discharge_warning, self.crit_discharge_alarm, self.crit_discharge_shutdown, self.over_volt_warning, self.over_volt_alarm, self.over_volt_shutdown, self.over_current_warning, self.over_current_alarm, self.over_current_shutdown, self.pcba_over_temp_warning, self.pcba_over_temp_alarm, self.pcba_over_temp_shutdown, self.temp_sensor_failure, self.volt_sensor_failure, self.current_sensor_failure, self.too_many_modules, self.module_lost, self.soc_mismatch, self.low_capacity, self.vmu_timeout, self.discharge_precharge_fail, self.sanity_error))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != ubms_status_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ubms_status_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ubms_status_t()
        self.utime, self.percent_charge = struct.unpack(">qh", buf.read(10))
        __mode_len = struct.unpack('>I', buf.read(4))[0]
        self.mode = buf.read(__mode_len)[:-1].decode('utf-8', 'replace')
        __charge_stage_len = struct.unpack('>I', buf.read(4))[0]
        self.charge_stage = buf.read(__charge_stage_len)[:-1].decode('utf-8', 'replace')
        self.inter_module_balancing, self.module_num, self.inter_balance_num, self.low_temp_warning, self.low_temp_alarm, self.low_temp_shutdown, self.over_temp_warning, self.over_temp_alarm, self.over_temp_shutdown, self.crit_discharge_warning, self.crit_discharge_alarm, self.crit_discharge_shutdown, self.over_volt_warning, self.over_volt_alarm, self.over_volt_shutdown, self.over_current_warning, self.over_current_alarm, self.over_current_shutdown, self.pcba_over_temp_warning, self.pcba_over_temp_alarm, self.pcba_over_temp_shutdown, self.temp_sensor_failure, self.volt_sensor_failure, self.current_sensor_failure, self.too_many_modules, self.module_lost, self.soc_mismatch, self.low_capacity, self.vmu_timeout, self.discharge_precharge_fail, self.sanity_error = struct.unpack(">bhhbbbbbbbbbbbbbbbbbbbbbbbbbbbb", buf.read(33))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ubms_status_t in parents: return 0
        tmphash = (0xe3a7c353736ce84b) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ubms_status_t._packed_fingerprint is None:
            ubms_status_t._packed_fingerprint = struct.pack(">Q", ubms_status_t._get_hash_recursive([]))
        return ubms_status_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

