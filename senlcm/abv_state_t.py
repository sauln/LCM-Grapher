"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

class abv_state_t(object):
    __slots__ = ["utime", "X", "Xd", "Y", "Yd", "Z", "Zd", "sog", "h", "hd", "p", "pd", "r", "rd", "lc_p", "lc_s", "lc_t", "artic", "node_engaged"]

    def __init__(self):
        self.utime = 0
        self.X = 0.0
        self.Xd = 0.0
        self.Y = 0.0
        self.Yd = 0.0
        self.Z = 0.0
        self.Zd = 0.0
        self.sog = 0.0
        self.h = 0.0
        self.hd = 0.0
        self.p = 0.0
        self.pd = 0.0
        self.r = 0.0
        self.rd = 0.0
        self.lc_p = 0.0
        self.lc_s = 0.0
        self.lc_t = 0.0
        self.artic = 0.0
        self.node_engaged = False

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(abv_state_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qfffffffffffffffffb", self.utime, self.X, self.Xd, self.Y, self.Yd, self.Z, self.Zd, self.sog, self.h, self.hd, self.p, self.pd, self.r, self.rd, self.lc_p, self.lc_s, self.lc_t, self.artic, self.node_engaged))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != abv_state_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return abv_state_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = abv_state_t()
        self.utime, self.X, self.Xd, self.Y, self.Yd, self.Z, self.Zd, self.sog, self.h, self.hd, self.p, self.pd, self.r, self.rd, self.lc_p, self.lc_s, self.lc_t, self.artic, self.node_engaged = struct.unpack(">qfffffffffffffffffb", buf.read(77))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if abv_state_t in parents: return 0
        tmphash = (0x69a080ee2d276bc9) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if abv_state_t._packed_fingerprint is None:
            abv_state_t._packed_fingerprint = struct.pack(">Q", abv_state_t._get_hash_recursive([]))
        return abv_state_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

